#+TITLE: Portable Emacs

My configuration for emacs. Feel free to use. The command files are compiled into this readme.

* Installation instructions

  This will erase previous init.el, so please back-up your emacs.d
  before running this.

#+BEGIN_SRC bash
mkdir ~/.emacs.d
cd ~/.emacs.d

git clone https://github.com/acarrab/portableEmacs.git
cd portableEmacs

bash ./install.sh
   #+END_SRC

  You can still add settings to your init.el file as well.

* Added keybindings

- ~M-y~   councel-yank-pop
- ~C-s~   swiper
- ~C-c C-r~   ivy-resume
- ~M-x~   counsel-M-x
- ~C-x C-f~   counsel-find-file
- ~C-c g~   counsel-git
- ~C-c j~   counsel-git-grep
- ~C-c k~   counsel-ag
- ~C-x l~   counsel-locate
- ~C-S-o~   counsel-rhythmbox
- ~C-r~   counsel-expression-history
- ~C-c C-SPC~   company-complete
- ~C-c j~   ace-window
- ~C-c M-c~   async-shell-command
- ~C-c x~   run-term
- ~C-c M-l~   mc/edit-lines
- ~C->~   mc/mark-next-like-this
- ~C-<~   mc/mark-previous-like-this
- ~C-c l~   mc/mark-all-like-this
- ~C-c c~   shell-command
- ~C-c M-x~   term
- ~C-c v~   create-view

* src/defaults.el

#+BEGIN_SRC emacs-lisp
(require 'package)
;; add package archives
(setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
			 ("marmalade" . "https://marmalade-repo.org/packages/")
			 ("melpa" . "https://melpa.org/packages/")
			 ("org" . "http://orgmode.org/elpa/")))

(package-initialize)

;; add short hand loading procedure for downloading things from repo's
(unless (package-installed-p 'use-package) (package-refresh-contents) (package-install 'use-package))
(require 'use-package)
#+END_SRC

** Use emacs server to decrease load time when opening emacs a second time 

#+BEGIN_SRC emacs-lisp
(require 'server)
(unless (server-running-p) (server-start))
#+END_SRC

** modern file manipulation 

#+BEGIN_SRC emacs-lisp
(use-package f :ensure t)
(require 'f)

;; adds new syntax
(use-package try :ensure t)
#+END_SRC

** add in suggestions 

#+BEGIN_SRC emacs-lisp
(use-package which-key :ensure t :config (which-key-mode))
#+END_SRC

** add searching recommendations.. to everything 

#+BEGIN_SRC emacs-lisp
(use-package counsel :ensure t :bind ("M-y" . councel-yank-pop))
(use-package smex :ensure t)
(use-package swiper :ensure t
  :init (progn
	    (ivy-mode 1)
	    (setq ivy-use-virtual-buffers t)
	    )
  :bind (("C-s" . swiper)
	 ("C-c C-r" . ivy-resume)
	 ("<f6>" . ivy-resume)
	 ("M-x" . counsel-M-x)
	 ("C-x C-f" . counsel-find-file)
	 ("<f1> f" . counsel-describe-function)
	 ("<f1> v" . counsel-describe-variable)
	 ("<f1> l" . counsel-load-library)
	 ("<f2> i" . counsel-info-lookup-symbol)
	 ("<f2> u" . counsel-unicode-char)
	 ("C-c g" . counsel-git)
	 ("C-c j" . counsel-git-grep)
	 ("C-c k" . counsel-ag)
	 ("C-x l" . counsel-locate)
	 ("C-S-o" . counsel-rhythmbox)
	 :map read-expression-map
	 ("C-r" .  counsel-expression-history))
  )
#+END_SRC

* src/emacs-behavior.el

#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-screen t)
(setq inhibit-startup-message t)
(setq ring-bell-function (lambda () ()))
(setq visible-bell nil)
(add-hook 'before-save-hook 'delete-trailing-whitespace)

(require 're-builder)
(setq reb-re-syntax 'string)
#+END_SRC

** fix inaccessible functions in shell for mac-os platform 

#+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell :ensure t)
(when (memq window-system '(mac ns x)) (exec-path-from-shell-initialize))

(setq backup-directory-alist
      `(("." . ,(expand-file-name (concat user-emacs-directory "backups")))))
(setq auto-save-file-name-transforms
      `((".*" ,(expand-file-name (concat user-emacs-directory "autosaves")) t)))

(put 'upcase-region 'disabled nil)
(put 'downcase-region 'disabled nil)
#+END_SRC

* src/theme.el

#+BEGIN_SRC emacs-lisp
(use-package suscolors-theme :ensure t)
(use-package gruvbox-theme :ensure t)

(if nil
    (progn

      (use-package smart-mode-line :ensure t :init (setq sml/theme 'dark)
	:config (progn
		  (setq sml/no-confirm-load-theme t)
		  (sml/setup)
		  (add-to-list 'sml/replacer-regexp-list '("g(.*)home/acarrab/" ":Palmetto:") t)
		  (add-to-list 'sml/replacer-regexp-list  '("^~/Desktop/courses/\(\w+\)/"
							    (lambda (s) (concat ":" (upcase (match-string 1 s)) ":")))
			       t)
		  (add-to-list 'sml/replacer-regexp-list  '("^~/Desktop/\(\w+\)/"
							    (lambda (s) (concat ":" (upcase (match-string 1 s)) ":")))
			       t)
		  (setf rm-blacklist "[(company)(ivy)(WK)]")
		  )
	)

      ))
#+END_SRC

** Highlight matching parenthesis 

#+BEGIN_SRC emacs-lisp
(show-paren-mode 1)

;; Color all delimiters
(use-package rainbow-delimiters :ensure t)
(add-hook 'prog-mode-hook 'rainbow-delimiters-mode)

(require 'rainbow-delimiters)

(require 'org)

(setq-default org-startup-with-inline-images t)
(setq-default org-ellipsis " »")
(setq-default org-todo-keyword-faces
	      '(("TODO" . (:foreground "teal" :weight bold)) ("STARTED" . "yellow")
		("DONE" . (:foreground "green" :weight bold))))
(setq-default org-src-fontify-natively t)
(setq-default org-src-tab-acts-natively t)
(setq-default org-log-done 'time)

(use-package org-bullets :ensure t
  :hook (org-mode . org-bullets-mode)
  :config (progn (setq org-bullets-face-name (quote org-bullet-face))
		 (setq org-bullets-bullet-list '("◎" "✥" "❂" "✛" "✱" "✻" "⎈" "✛"))
		 )
  )

(org-babel-do-load-languages 'org-babel-load-languages '((python . t) (latex . t)))
(setq-default org-highlight-latex-and-related '(latex script entities))

(if (display-graphic-p)
    (progn
      (use-package git-gutter-fringe :ensure t)
      (require 'git-gutter-fringe)

      (setq-default left-fringe-width 20)
      (setq-default right-fringe-width 20)

      (global-git-gutter-mode +1)
      (add-hook 'find-file-hook 'linum-mode)
      )
  (progn
    (use-package git-gutter :ensure t)
    (require 'git-gutter)
    (global-git-gutter-mode +1)
    (git-gutter:linum-setup)
    (custom-set-variables
     '(git-gutter:modified-sign "  ") ;; two space
     '(git-gutter:added-sign "++")    ;; multiple character is OK
     '(git-gutter:deleted-sign "--"))
    (set-face-background 'git-gutter:modified "purple") ;; background color
    (set-face-foreground 'git-gutter:added "green")
    (set-face-foreground 'git-gutter:deleted "red")
    )
  )

(use-package spaceline :ensure t
  :init (progn
	  (spaceline-emacs-theme)
	  (spaceline-info-mode)
	  )
  )

(let ((class '((class color) (min-colors 89)))
      ;; Palette colors.
      (yellow-1 "#fce94f") (yellow-2 "#ffd700") (yellow-3 "#c4a000") (yellow-3-5 "#aaaa11") (yellow-4 "#875f00")
      (orange-1 "#ffaf5f") (orange-2 "#ff8700") (orange-3 "#ff5d17") (orange-4 "#d75f00") (orange-5 "#af5f00")
      (magenta-1 "#ff7bbb") (magenta-2 "#ff4ea3") (magenta-3 "#ff1f8b")
      (green-1 "#afff00") (green-2 "#a1db00") (green-3 "#5faf00") (green-4 "#008700") (green-5 "#005f00")
      (cyan-1 "#87ffff") (cyan-2 "#87d7af") (cyan-3 "#00d7af") (cyan-4 "#00ac8a") (cyan-5 "#5faf87") (cyan-6 "#005f5f") (cyan-7 "#236f73")
      (blue-1 "#5fafd7") (blue-2 "#1f5bff") (blue-3 "#005f87") (blue-4 "#005faf") (blue-5 "#0000af") (blue-6 "#00005f")
      (purple-1 "#d18aff") (purple-2 "#af5fff") (purple-3 "#9a08ff") (purple-4 "#6c0099")
      (red-1 "#ef2929")  (red-2 "#dd0000")  (red-3 "#a40000") (red-4 "#5f0000")
      (white-1 "#c6c6c6") (white-2 "#c6c6c6") (white-3 "#b2b2b2") (black-1 "#a8a8a8") (black-2 "#8a8a8a")
      (black-2-5 "#6c6c6c") (black-3 "#4e4e4e") (black-4 "#3a3a3a") (black-5 "#303030") (black-6 "#000000")
      (LIGHT_BG "#fdfde7") (white-0 "#eeeeee")
      (green-02 "#5fd700") (green-01 "#d7ff00") (green-0 "#d7ff5f") (green-00 "#d7ff87")
      (cyan-0 "#d7ffd7")
      (blue-01 "#c3c9f8") (blue-0 "#afd7ff") (blue-00 "#d7d7ff")
      (yellow-0 "#ffff87") (yellow-00 "#ffffaf")
      (purple-0 "#af87ff") (purple-00 "#e6a8df")
      (red-0 "#ff4b4b") (red-00 "#ffafaf")
      (magenta-0 "#ffafd7") (magenta-00 "#ffd7ff")
      (orange-0 "#ffaf87") (orange-00 "#ffd787") (orange-000 "#ffd7af")
      (linum-dark "#87875f") (linum-light "#d7d7af")
      )

  (custom-theme-set-faces
   'suscolors

   ;; org-mode
   `(org-code ((,class (:foreground ,blue-1 :background ,black-4))))
   `(org-link ((,class (:foreground ,blue-1 :underline t))))

   `(org-priority ((,class (:foreground ,red-1 :background ,nil))))
   `(org-block ((,class (:foreground ,blue-1 :background ,black-4))))
   `(org-block-background ((,class (:foreground nil :background ,black-5))))
   `(org-block-begin-line ((,class (:foreground ,white-0 :background ,cyan-6))))
   `(org-block-end-line ((,class (:foreground ,black-3 :background nil))))
   )
  )
#+END_SRC

* src/tools.el

#+BEGIN_SRC emacs-lisp
(use-package flycheck :ensure t
  :init (global-flycheck-mode)
  )
#+END_SRC

** Auto-complete 

#+BEGIN_SRC emacs-lisp
(use-package company :ensure t :init (global-company-mode)
  :config (defvar company-dabbrev-downcase)
  :bind ("C-c C-SPC" . company-complete))
#+END_SRC

** displays files in current directory in nice way 

#+BEGIN_SRC emacs-lisp
(use-package treemacs :ensure t)
#+END_SRC

** moving around windows in emacs 

#+BEGIN_SRC emacs-lisp
(use-package ace-window :ensure t :bind ("C-c j" . ace-window))
#+END_SRC

** improves ability to type repetitive code segments quickly 

#+BEGIN_SRC emacs-lisp
(use-package yasnippet :ensure t :init (yas-global-mode 1))
(use-package yasnippet-snippets :ensure t)
#+END_SRC

** allows for asynchronous file copy/move mostly with dired mode 

#+BEGIN_SRC emacs-lisp
(use-package async :ensure t :bind ("C-c M-c" . async-shell-command))
(global-set-key (kbd "C-c c") 'shell-command)

(use-package multi-term :ensure t
  :init (progn
	  ;; (setenv "SHELL" "/bin/zsh")
	  ;; (setq-default explicit-shell-file-name "/bin/zsh")

	  (defun run-term ()
	    "Creates multi-term terminal in current window."
	    (interactive)
	    (multi-term)
	    (setq-default truncate-lines nil)
	    )
	  )
  :bind ("C-c x" . run-term)
  )
(global-set-key (kbd "C-c M-x") 'term)

(use-package magit :ensure t)

(use-package multiple-cursors :ensure t
  :bind (("C-c M-l" . mc/edit-lines)
	 ("C->" . mc/mark-next-like-this)
	 ("C-<" . mc/mark-previous-like-this)
	 ("C-c l" . mc/mark-all-like-this))
  )

(add-hook 'prog-mode-hook #'hs-minor-mode)
#+END_SRC

* src/project-views.el

#+BEGIN_SRC emacs-lisp
(require 'cl)

(defun multi-term-kill-all ()
  "Kill all multi-term processes with ctrl+c ctrl+d."
  (interactive)
  (defun is-useless-buffer (buffer)
    (let ((name (buffer-name buffer)))
      (and (= ?* (aref name 0)) (string-match "*terminal<[0-9]+>*" name))))

  (loop for buffer being the buffers
	do (and
	    (is-useless-buffer buffer)
	    (progn (switch-to-buffer buffer) (term-send-raw-string "C-c") (term-send-raw-string "C-d"))
	    )
	)
  )

(defun find-first-file-in-directories-above (file)
  "Return FILE in current or above directory."
  (defun reduce-directory (s) (replace-regexp-in-string "[^/]*/?$" "" s))
  (defun get-file-or-null (searching-directory)
    (if (not searching-directory) nil
      (if (file-exists-p (expand-file-name file searching-directory))
	  (expand-file-name file searching-directory)
	(if (or (string= searching-directory "/") (string= searching-directory "")) nil
	  (get-file-or-null (reduce-directory searching-directory))
          )
	)
      )
    )
  (get-file-or-null default-directory)
  )

(defun multi-term-and-run (process-string)
  "Run a multi-term processes then run PROCESS-STRING command inside of it."
  (multi-term)
  (term-send-raw-string (concat process-string "n"))
  )

(defun create-view ()
  "Create default view for the current project."

  (interactive)

  (defun shrink-my-window-vertical (win cols)
    (window-resize win (window-resizable win -10000))
    (window-resize win (window-resizable win cols))
    )
  (defun shrink-my-window-horizontal (win cols)
    (window-resize win (window-resizable win -10000 t) t)
    (window-resize win (window-resizable win cols t) t)
    )
  (defun shrink-my-window (win horizontal)
    (if horizontal
	(shrink-my-window-horizontal win 40)
      (shrink-my-window-vertical win 10)
      )
    )

  (defun generate-view-config-file ()
    (message "No .view.el file was found. Making config view file...")
    (find-file (expand-file-name ".view.el"))
    (erase-buffer)
    (defun write-lines ()
      )

    (insert "(setq project-script-commands '())")
    (newline nil)
    (insert "(setq project-script-commands '())")
    (newline nil)
    (insert "(setq project-script-commands '())")
    (newline nil)
    (insert "(setq project-files-to-open '())")
    (forward-line -1)
    (move-end-of-line nil)
    (backward-char)
    (backward-char)
    )

  (defun generate-view-from-file (config-file project-base-directory)
    (load-file config-file)

    (multi-term-kill-all)

    (if (treemacs--is-visible?) (delete-window (treemacs--is-visible?)))
    (delete-other-windows)
    (when project-script-commands
      (progn
	(setq right (y-or-n-p "Put the terminals to the right (default is bottom)? "))
	(delete-other-windows)
	)
      )
    ;;(kill-matching-buffers "*terminal<[0-9]*>*")
    (find-file project-base-directory)
    (if (y-or-n-p "Use Treemacs? ") (progn (treemacs) (other-window 1)))

    ;; split into user files and terminal view

    (defun open-user-files (project-files-list)
      "opens users files."
      (when project-files-list
	(find-file (car project-files-list))
	(if (cdr project-files-list) (split-window-horizontally))
	(other-window 1)
	(open-user-files (cdr project-files-list))
	)
      )
    ;; terminal windows
    (defun create-terminals (cmds)
      "creates terminals and stops 1 past last terminal"
      (when cmds
	(multi-term-and-run (concat (concat "cd " project-base-directory) (concat " && " (car cmds))))
	(if (cdr cmds)
	    (if right (split-window-vertically) (split-window-horizontally))
	  (progn (balance-windows) (shrink-my-window (get-buffer-window) right))
	  )
	(other-window 1)
	(create-terminals (cdr cmds))
	)
      )

    (when project-script-commands
      (if right   (split-window-horizontally) (split-window-vertically))
      )
    (open-user-files project-files-to-open)
    (create-terminals project-script-commands)
    )

  (setq config-file (find-first-file-in-directories-above ".view.el"))
  (if (not config-file) (generate-view-config-file)
    (generate-view-from-file config-file
			     (setq project-base-directory (replace-regexp-in-string "/[^/]*$" "" config-file))
			     )
    )
  )

(global-set-key (kbd "C-c v") 'create-view)
#+END_SRC

* src/languages/webdev.el

#+BEGIN_SRC emacs-lisp
(use-package flycheck :ensure t)
(use-package typescript :ensure t)
(use-package tide :ensure t
  :init (flycheck-add-mode 'typescript-tslint 'web-mode)
  :hook '((typescript-mode-hook . tide-mode)
	  (before-save-hook . tide-format-before-save))
  )

(defun setup-tide-mode ()
  "Activates tide mode with additional configuration."
  (tide-setup)
  (flycheck-mode +1)
  (setq-default flycheck-check-syntax-automatically '(save mode-enabled))
  (eldoc-mode +1)
  (tide-hl-identifier-mode +1)
  ;; company is an optional dependency. You have to
  ;; install it separately via package-install
  ;; `M-x package-install [ret] company`
  (company-mode +1)
  )
(defun setup-tide-mode-when-tsx ()
  "Activates tide mode with tsx configuration."
  (when (string-equal "tsx" (file-name-extension buffer-file-name))
    (setup-tide-mode))
  )

(use-package web-mode :ensure t
  :init (progn
	  (add-to-list 'auto-mode-alist '("\.html?\'" . web-mode))
	  (add-to-list 'auto-mode-alist '("\.phtml\'" . web-mode))
	  (add-to-list 'auto-mode-alist '("\.php\'" . web-mode))
	  (add-to-list 'auto-mode-alist '("\.tpl\.php\'" . web-mode))
	  (add-to-list 'auto-mode-alist '("\.[agj]sp\'" . web-mode))
	  (add-to-list 'auto-mode-alist '("\.as[cp]x\'" . web-mode))
	  (add-to-list 'auto-mode-alist '("\.erb\'" . web-mode))
	  (add-to-list 'auto-mode-alist '("\.mustache\'" . web-mode))
	  (add-to-list 'auto-mode-alist '("\.djhtml\'" . web-mode))
	  (add-to-list 'auto-mode-alist '("\.tsx\'" . web-mode))
	  )
  )

(setq company-tooltip-align-annotations t)

(add-hook 'typescript-mode-hook #'setup-tide-mode)
#+END_SRC

* src/languages/python.el

#+BEGIN_SRC emacs-lisp
(use-package anaconda-mode :ensure t)
(use-package ein  :ensure t)
(use-package importmagic :ensure t)
(use-package virtualenv :ensure t)
(use-package edit-server :ensure t)
(use-package jedi :ensure t)
#+END_SRC

* src/languages/cpp.el

#+BEGIN_SRC emacs-lisp
(setq auto-mode-alist (append '(("\.h$" . c++-mode)) auto-mode-alist))
#+END_SRC

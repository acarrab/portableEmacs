#+OPTIONS: H:5 num:nil tags:nil timestamps:t
** Experimental
   This file contains properties that may often change, which would cause recompilation
*** f.el
#+BEGIN_SRC emacs-lisp
(use-package f :ensure t)
(require 'f)
#+END_SRC
*** Fix inaccessible functions on Mac-osx platform
This seems to fix the problem!
#+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell :ensure t)
(when (memq window-system '(mac ns x))
  (exec-path-from-shell-initialize))


#+END_SRC
*** Javascript indentation

#+BEGIN_SRC emacs-lisp
(setq js2-basic-offset 2)
#+END_SRC
*** Typescript
**** Tide
#+BEGIN_SRC emacs-lisp
  ;;(use-package flycheck :ensure t)
  (use-package tide :ensure t)
  (use-package typescript :ensure t)
  (defun setup-tide-mode ()
    (interactive)
    (tide-setup)
    (flycheck-mode +1)
    (setq flycheck-check-syntax-automatically '(save mode-enabled))
    (eldoc-mode +1)
    (tide-hl-identifier-mode +1)
    ;; company is an optional dependency. You have to
    ;; install it separately via package-install
    ;; `M-x package-install [ret] company`
    (company-mode +1)
    )



  ;; aligns annotation to the right hand side
  (setq company-tooltip-align-annotations t)

  ;; formats the buffer before saving
  (add-hook 'before-save-hook 'tide-format-before-save)

  (add-hook 'typescript-mode-hook #'setup-tide-mode)
#+END_SRC
**** Tsx
#+BEGIN_SRC emacs-lisp
  (require 'web-mode)
  (add-to-list 'auto-mode-alist '("\\.tsx\\'" . web-mode))
  (add-hook 'web-mode-hook
            (lambda ()
              (when (string-equal "tsx" (file-name-extension buffer-file-name))
                (setup-tide-mode))))
  (require 'flycheck)



  ;; enable typescript-tslint checker
  (flycheck-add-mode 'typescript-tslint 'web-mode)
#+END_SRC
**** Company Key binding C-c C-SPC
#+BEGIN_SRC
  (eval-after-load "tide-mode"
    '(define-key tide-mode-map (kbd "C-c C-SPC") 'company-tide))
#+END_SRC

**** Format Options
#+BEGIN_SRC emacs-lisp
  (setq tide-format-options
        '(:insertSpaceAfterFunctionKeywordForAnonymousFunctions t :placeOpenBraceOnNewLineForFunctions nil)
        )
#+END_SRC
**** Keybindings
#+BEGIN_SRC
  (defun my-tide-config ()
    "add keybindings that activate when using tide-mode"
    (local-set-key (kbd "C-c C-SPC") 'company-tide)
  )
  (add-hook 'tide-mode-hook 'my-tide-config)

#+END_SRC
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c C-SPC") 'company-complete)

#+END_SRC

*** Palmetto Cluster Specific

#+BEGIN_SRC emacs-lisp
  (defun flip()
    "flips directory to other and opens dired mode"
    (interactive)
    (dired
     (if (eq 0 (string-match "\\(/scratch3/acarrab/\\)" (expand-file-name default-directory)))
         (replace-regexp-in-string "/scratch3/" "/zfs/safrolab/users/" (expand-file-name default-directory))
       (replace-regexp-in-string "/zfs/safrolab/users/" "/scratch3/" (expand-file-name default-directory))
       )
     ))

  (defun qstat ()
    "Get my active jobs"
    (interactive)
    (message (shell-command-to-string "qstat -u acarrab")))

  (defun whatsfree ()
    "Get list of  what nodes are free"
    (interactive)
    (message (shell-command-to-string "whatsfree")))

                                          ; (defun qsub ()
                                          ;   "Get my active jobs"
                                          ;   (interactive)
                                          ;   (message (shell-command-to-string "whatsfree")))
#+END_SRC

*** moving autosave directory to .emacs.d/saves
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist
        `(("." . ,(expand-file-name (concat user-emacs-directory "backups")))))
  (setq auto-save-file-name-transforms
        `((".*" ,(expand-file-name (concat user-emacs-directory "autosaves")) t)))

#+END_SRC

*** Multi-term
#+BEGIN_SRC emacs-lisp
    ;;(setq-default explicit-shell-file-name "/bin/zsh")
    ;;(setq-default shell-file-name "/bin/zsh")
    ;; some other multi-term line was here...
    (setenv "SHELL" "/bin/zsh")
    (setq explicit-shell-file-name "/bin/zsh")


    (use-package multi-term :ensure t)
    (defun run-term ()
      (interactive)
      (command-execute 'multi-term)
      (setq-default truncate-lines nil)
      )



    (global-set-key (kbd "C-c t") 'run-term)





#+END_SRC

*** Shortcut for toggling filelock

#+BEGIN_SRC emacs-lisp
  ;;(setq create-lockfiles nil)
#+END_SRC
*** Adds ability to expand window in group
    I wrote this code to expand the current buffers window so that you can see more of the code if needed
#+BEGIN_SRC emacs-lisp
  (setq window-shrink-columns 20)
  (setq window-shrink-rows 10)

  (defun focus-shrink-all-other-windows ()
    "expands window in current group"
    (interactive)


    (defun go-to-windows (win nxt)
      "returns a string with all window widths in current row"
      (if (not (eq win nil))
          (progn
            (funcall
             (lambda (win)
               (if (window-combined-p)
                   (nprogn
                     (window-resize win (window-resizable win -10000))
                     (window-resize win (window-resizable win window-shrink-rows))
                     )
                 (progn
                   (window-resize win (window-resizable win -10000 t) t)
                   (window-resize win (window-resizable win window-shrink-columns t) t)
                   )
                 )
               )
             win
             )
            (go-to-windows (funcall nxt win) nxt)
            )
        )
      )


    (go-to-windows (window-prev-sibling) (lambda (x) (window-prev-sibling x)))
    (go-to-windows (window-next-sibling) (lambda (x) (window-next-sibling x)))
    )

   (global-set-key (kbd "C-c f") 'focus-shrink-all-other-windows)
#+END_SRC
*** git-gutter
#+BEGIN_SRC emacs-lisp

  (if (display-graphic-p)
      (progn
	(use-package git-gutter-fringe :ensure t)
	(require 'git-gutter-fringe)

	(setq-default left-fringe-width 20)
	(setq-default right-fringe-width 20)

	(global-git-gutter-mode +1)
	(add-hook 'find-file-hook 'linum-mode)
	)
    (progn
      (use-package git-gutter :ensure t)
      (require 'git-gutter)
      (global-git-gutter-mode +1)
      (git-gutter:linum-setup)
      (custom-set-variables
       '(git-gutter:modified-sign "  ") ;; two space
       '(git-gutter:added-sign "++")    ;; multiple character is OK
       '(git-gutter:deleted-sign "--"))
      (set-face-background 'git-gutter:modified "purple") ;; background color
      (set-face-foreground 'git-gutter:added "green")
      (set-face-foreground 'git-gutter:deleted "red")
      )
    )

#+END_SRC
*** FiraCode with ligatures

This has been a disappointment, it crashes at so many points with so
many different features within emacs. When something crashes, it is
probably in-part because of this...


#+BEGIN_SRC emacs-lisp
(when (window-system)
  (set-default-font "Fira Code"))
(let ((alist '((33 . ".\\(?:\\(?:==\\|!!\\)\\|[!=]\\)")
               (35 . ".\\(?:###\\|##\\|_(\\|[#(?[_{]\\)")
               (36 . ".\\(?:>\\)")
               (37 . ".\\(?:\\(?:%%\\)\\|%\\)")
               (38 . ".\\(?:\\(?:&&\\)\\|&\\)")
               (42 . ".\\(?:\\(?:\\*\\*/\\)\\|\\(?:\\*[*/]\\)\\|[*/>]\\)")
;; crashes cpp mode: (43 . ".\\(?:\\(?:\\+\\+\\)\\|[+>]\\)")
;; crashes eshell:   (45 . ".\\(?:\\(?:-[>-]\\|<<\\|>>\\)\\|[<>}~-]\\)")
;; hasn't crashed yet, reported to crash with helm integration:  (46 . ".\\(?:\\(?:\\.[.<]\\)\\|[.=-]\\)")
;; crashes cpp mode: (47 . ".\\(?:\\(?:\\*\\*\\|//\\|==\\)\\|[*/=>]\\)")
               (48 . ".\\(?:x[a-zA-Z]\\)")
               (58 . ".\\(?:::\\|[:=]\\)")
               (59 . ".\\(?:;;\\|;\\)")
               (60 . ".\\(?:\\(?:!--\\)\\|\\(?:~~\\|->\\|\\$>\\|\\*>\\|\\+>\\|--\\|<[<=-]\\|=[<=>]\\||>\\)\\|[*$+~/<=>|-]\\)")
               (61 . ".\\(?:\\(?:/=\\|:=\\|<<\\|=[=>]\\|>>\\)\\|[<=>~]\\)")
               (62 . ".\\(?:\\(?:=>\\|>[=>-]\\)\\|[=>-]\\)")
               (63 . ".\\(?:\\(\\?\\?\\)\\|[:=?]\\)")
               (91 . ".\\(?:]\\)")
               (92 . ".\\(?:\\(?:\\\\\\\\\\)\\|\\\\\\)")
               (94 . ".\\(?:=\\)")
               (119 . ".\\(?:ww\\)")
               (123 . ".\\(?:-\\)")
               (124 . ".\\(?:\\(?:|[=|]\\)\\|[=>|]\\)")
               (126 . ".\\(?:~>\\|~~\\|[>=@~-]\\)")
               )
             ))
  (dolist (char-regexp alist)
    (set-char-table-range composition-function-table (car char-regexp)
                          `([,(cdr char-regexp) 0 font-shape-gstring]))))
#+END_SRC

*** User space configuration

    This sets up a view for a project file.

    If you want to use,
    1. create a file called ~.view.el~ in the root of your project directory
    2. put the command with whatever terminal commands you want
       ~(setq project-script-commands '("echo terminal command 1" "echo terminal command 2" "echo terminal command 3")~
    3. run ~create-view~
       For me it is bount to ~C-c v~




#+BEGIN_SRC emacs-lisp
  (require 'cl)

    (defun multi-term-kill-all ()
      "kills all multi-term processes with ctrl+c ctrl+d"
      (interactive)
      (defun is-useless-buffer (buffer)
        (let ((name (buffer-name buffer)))
        (and (= ?* (aref name 0)) (string-match "\*terminal<[0-9]+>\*" name))))

      (loop for buffer being the buffers
            do (and
                (is-useless-buffer buffer)
                (progn (switch-to-buffer buffer) (term-send-raw-string "\C-c") (term-send-raw-string "\C-d"))
                )
            )
      )

  (defun create-view ()
    "creates the view for the current project"

    (interactive)
    (defun find-first-file-in-directories-above (file)
      (defun get-file-or-null (searching-directory)
        (if (file-exists-p (expand-file-name file searching-directory))
            (expand-file-name file searching-directory)
          (if (string-equal searching-directory "/") nil
            (get-file-or-null (replace-regexp-in-string "[^/]*/$" "" searching-directory))
            )
          )
        )
      (get-file-or-null default-directory)
      )

    (defun multi-term-and-run (process-string)
      "run a multi-term processes then run a command inside of it"
      (multi-term)
      (term-send-raw-string (concat process-string "\n"))
      )



    (defun create-terminals-for-view (config-file project-base-directory)
      (load-file config-file)
      (if right (split-window-horizontally) (split-window-vertically))
      (other-window 1)

      ;; shrink the terminal windows
      (defun shrink-terminal-windows (win)
        (if right
            (progn
              (window-resize win (window-resizable win -10000 t) t)
              (window-resize win (window-resizable win 40 t) t)
              )
          (progn
            (window-resize win (window-resizable win -10000))
            (window-resize win (window-resizable win 10))
            )
          )
        )

      ;; terminal windows
      (defun create-terminals (cmds)
        "creates terminals and stops 1 past last terminal"
        (when cmds
          (multi-term-and-run (concat (concat "cd " project-base-directory) (concat " && " (car cmds))))
          (if (cdr cmds)
              (if right (split-window-vertically) (split-window-horizontally))
            (progn (balance-windows) (shrink-terminal-windows (get-buffer-window)))
            )
          (other-window 1)
          (create-terminals (cdr cmds))
          )
        )
      (create-terminals project-script-commands)
      )


    (setq config-file (find-first-file-in-directories-above ".view.el"))
    (if (not config-file)
        (progn
          (message "No .view.el file was found. Making standard view...")
          (find-file (expand-file-name ".view.el"))
	  (erase-buffer)
	  (insert-string "(setq project-script-commands '())")
	  (backward-char)
	  (backward-char)
          )
      (progn
        (setq project-base-directory (replace-regexp-in-string "/[^/]*$" "" config-file))
        (create-terminals-for-view config-file project-base-directory)




	(multi-term-kill-all)
	(delete-other-windows)
	(setq use-treemacs (y-or-n-p "Use Treemacs? "))
	(setq right (y-or-n-p "Put the terminals to the right? (default is bottom) "))

	;;(kill-matching-buffers "\*terminal<[0-9]*>\*")
	(delete-other-windows)

	(if use-treemacs (progn (treemacs) (other-window 1)))
	)
      )
    )

   (global-set-key (kbd "C-c v") 'create-view)
#+END_SRC

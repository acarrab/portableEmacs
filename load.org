#+TITLE: Emacs Configuration
#+STARTUP: indent
#+OPTIONS: H:5 num:nil tags:nil timestamps:t
* TODO Add spellcheck
* TODO Decide what to use for javascript editing
* TODO add compnay support
* TODO add yank history thing with swiper interface


* Securing Emacs Environment
This section is borrowed from [[https://gitlab.com/buildfunthings/emacs-config][buildfunthings]]
- This installs certifi library for checking the certificate of
  package repo's we connect to
** Setup
#+BEGIN_SRC shell :exports none
  python -m pip install --user certifi
#+END_SRC

- Makes emacs only talk to other servers over a secure channel
#+BEGIN_SRC emacs-lisp
  ;; (require 'cl)
  ;; (setq tls-checktrust t)

  ;; (setq python (or (executable-find "py.exe")
  ;;                  (executable-find "python")
  ;;                  ))

  ;; (let ((trustfile
  ;;        (replace-regexp-in-string
  ;;         "\\\\" "/"
  ;;         (replace-regexp-in-string
  ;;          "\n" ""
  ;;          (shell-command-to-string (concat python " -m certifi"))))))
  ;;   (setq tls-program
  ;;         (list
  ;;          (format "gnutls-cli%s --x509cafile %s -p %%p %%h"
  ;;                  (if (eq window-system 'w32) ".exe" "") trustfile)))
  ;;   (setq gnutls-verify-error t)
  ;;   (setq gnutls-trustfiles (list trustfile)))
#+END_SRC

** Installing use-package securely...
*** Setup
- We need to tell emacs where to find packages that we may want to
  download.
- Without this, it would be difficult to install new processes
#+BEGIN_SRC emacs-lisp
  (require 'package)
#+END_SRC

- Getting rid of archived packages (that may be transferred over http)

#+BEGIN_SRC emacs-lisp
  (setq package-archives nil)
  ;; Load packages from online
  (setq package-archives '(("gnu"          . "https://elpa.gnu.org/packages/")
                           ("melpa"        . "https://melpa.org/packages/")
                           ("melpa-stable" . "https://stable.melpa.org/packages/")
                           ("org"       . "http://orgmode.org/elpa/")))
  (package-initialize)

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (require 'use-package)

  (use-package try :ensure t)
#+END_SRC
* Org Additions
This adds the nicer bullets to org mode.
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
  (setq org-startup-with-inline-images t)
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)
#+END_SRC

* Movement
** Searching
Gives key suggestions while typing key bindings
*** which-key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :config
    (which-key-mode))
  ;; Swiper addition with ivy
#+END_SRC
*** ivy
Finds you things (tm)
#+BEGIN_SRC emacs-lisp
  (use-package counsel :ensure t)
  (global-set-key (kbd "M-y") 'counsel-yank-pop)
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :ensure try
    :config
    (progn
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (global-set-key "\C-s" 'swiper)
      (global-set-key (kbd "C-c C-r") 'ivy-resume)
      (global-set-key (kbd "<f6>") 'ivy-resume)
      (global-set-key (kbd "M-x") 'counsel-M-x)
      (global-set-key (kbd "C-x C-f") 'counsel-find-file)
      (global-set-key (kbd "<f1> f") 'counsel-describe-function)
      (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
      (global-set-key (kbd "<f1> l") 'counsel-load-library)
      (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
      (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
      (global-set-key (kbd "C-c g") 'counsel-git)
      (global-set-key (kbd "C-c j") 'counsel-git-grep)
      (global-set-key (kbd "C-c k") 'counsel-ag)
      (global-set-key (kbd "C-x l") 'counsel-locate)
      (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
      (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
      ))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun ivy-show-kill-ring ()
  (interactive)
  (ivy-read "kill-ring: " (helm-kill-ring-candidates)
            :action 'insert))
#+END_SRC
This is used in order to be able to query information about a command
C-s C-o
#+BEGIN_SRC emacs-lisp
(use-package ivy-hydra :ensure t)
#+END_SRC
#+BEGIN_SRC emacs-lisp
  ;;;;;;;;;;;;;;;;;;;;;;;; AutoComplete  ;;;;;;;;;;;;;;;;;;;;;;;;
  (use-package auto-complete
    :ensure t
    :init
    (progn
      (ac-config-default)
      (global-auto-complete-mode t)
      ))
#+END_SRC

*** Window Movement
One of best ways to move around many windows in my opinion
#+BEGIN_SRC emacs-lisp
  (use-package ace-window :ensure t)
  (global-set-key (kbd "M-p") 'ace-window)
#+END_SRC
* Git related
#+BEGIN_SRC emacs-lisp
  (use-package magit :ensure t)
  (use-package dired-k :ensure t)
  (use-package git-gutter-fringe :ensure t)
  (require 'git-gutter-fringe)
  (global-git-gutter-mode +1)
  (setq git-gutter-fr:side 'right-fringe)
#+END_SRC
* Commonly used major-modes
** Languages
*** Python
#+BEGIN_SRC emacs-lisp
  ;;----------- Python additions ------------
  (use-package anaconda-mode :ensure t)
  ;;----------- IPython! --------------------
  (use-package ein  :ensure t)
  ;;------------ Fix python imports with ----
  (use-package importmagic :ensure t)
  ;;------------ Setting to ide -------------
  (use-package virtualenv :ensure t)
  (use-package edit-server :ensure t)
  (use-package jedi :ensure t)
#+END_SRC
*** R
This is ess, the best way I've seen of interacting with R code
#+BEGIN_SRC emacs-lisp
  (use-package ess :ensure t)
#+END_SRC
*** Computer-graphics - Shaders
#+BEGIN_SRC emacs-lisp
  (use-package shader-mode :ensure t)
#+END_SRC

*** Website Development
#+BEGIN_SRC emacs-lisp
(use-package web-mode :ensure t)
#+END_SRC
* Spellchecking
I may you ispell or fly spell
#+BEGIN_SRC emacs-lisp
#+END_SRC
* Fancy stuff

*** paredit
- I have to learn this in order to use
*** highlighting parentheses
#+BEGIN_SRC emacs-lisp
  (use-package highlight-parentheses
    :ensure t
    :diminish highlight-parentheses-mode
    :config
    (add-hook 'emacs-lisp-mode-hook
              (lambda() (highligh-parentheses-mode))))
  (global-highlight-parentheses-mode)
#+END_SRC
*** fancy delimiters
#+BEGIN_SRC emacs-lisp
  ;;;;;;;;;;;;;;;;;;;;;;;; Rainbow Delimiters ;;;;;;;;;;;;;;;;;;;;;;;;
  (use-package rainbow-delimiters    :ensure t )
  (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
  (require 'rainbow-delimiters)
#+END_SRC

* Random
#+BEGIN_SRC emacs-lisp
  ;;;;;;;;;;;;;;;;;;;;;;;; Preference ;;;;;;;;;;;;;;;;;;;;;;;;
  (prefer-coding-system 'utf-8)
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC
Makes sure my favorite theme is installed
#+BEGIN_SRC emacs-lisp
  (use-package suscolors-theme :ensure t)
#+END_SRC
This keeps emacs running in the background, so opening a new window
does not take as long as a fresh start
#+BEGIN_SRC emacs-lisp
  (require 'server)
  (unless (server-running-p)(server-start))
#+END_SRC

Maybe get rid of bell if I upgrade to emacs 25.1
#+BEGIN_SRC emacs-lisp
(defun my-bell-function())
(setq ring-bell-function 'my-bell-function)
(setq visible-bell nil)
#+END_SRC
* Startup

#+BEGIN_SRC shell :exports none
  python -m pip install --user pexpect
#+END_SRC

#+BEGIN_SRC  python
import pexpect, os
os.chdir("~/Desktop/courses/")
pexpect.run("git pull")
#+END_SRC

#+BEGIN_SRC emacs-lisp
    (defun myCustomStartup ()
      "Custom startup file"
      (interactive)
      (switch-to-buffer "StArTuP")
      (StartuP-init)
      )

    (defvar StartuP-mode-map
      (let ((map (make-sparse-keymap)))
        (define-key map "\RET" 'org-open-at-point)
        (define-key map "\M-m\f"  'org-open-at-point)
        map)
      "Keymap for 'StartuP-mode.")

    (define-derived-mode StartuP-mode org-mode "StArTuP-mode"
      "Major mode for startup.
    \\{StartuP-mode-map})"
      (setq case-fold-search nil))

    (add-hook 'StartuP-mode-hook
              '(lambda ()
                 (local-set-key (kbd "RET") 'org-open-at-point))
              )

    (defun StartuP-init ()
      "What startup does"
      (StartuP-mode)
      (read-only-mode)
      (loadAFile "~/Desktop/courses/todo.org")
       )


    (defun loadAFile (fileName)
      (let ((inhibit-read-only t))
        (insert-file (expand-file-name fileName))
      ))
#+END_SRC

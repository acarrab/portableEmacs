#+STARTUP: indent
#+OPTIONS: H:5 num:nil tags:nil timestamps:t
** Notes
*** Todo list
- Add spellcheck
- Decide what to use for javascript editing
- TODO add company support
*** Useful functions
- String Manipulation
  - number-to-string
  - concat
  - substring
- Printing to buffer
  - (message "The name of this buffer is %s." (buffer-name))
** Emacs Package Manager
*** Setup
We need to tell emacs where to find packages that we may want to
download. Without this, it would be difficult to install new
processes. With the following package we can use the ":ensure t"
clause to ensure that the package will be installed if it doesn't yet
exist.

#+BEGIN_SRC emacs-lisp
  (require 'package)
#+END_SRC

Adding things to the package repository

#+BEGIN_SRC emacs-lisp
  (setq package-archives nil)
  ;; Load packages from online
  (setq package-archives '(("gnu"          . "https://elpa.gnu.org/packages/")
                           ("melpa"        . "https://melpa.org/packages/")
                           ("melpa-stable" . "https://stable.melpa.org/packages/")
                           ("org"       . "http://orgmode.org/elpa/")))
  (package-initialize)

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (require 'use-package)

  (use-package try :ensure t)
#+END_SRC
** Movement
I considered searching a part of movement, since it does allow you to
move around quite nicely.

*** Searching
Gives key suggestions while typing key bindings
**** which-key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :config
    (which-key-mode))
  ;; Swiper addition with ivy
#+END_SRC
**** ivy
Finds you things (tm)
#+BEGIN_SRC emacs-lisp
  (use-package counsel :ensure t)
  (global-set-key (kbd "M-y") 'counsel-yank-pop)
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (use-package smex :ensure t)
  (use-package swiper
    :ensure try
    :config
    (progn
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (global-set-key "\C-s" 'swiper)
      (global-set-key (kbd "C-c C-r") 'ivy-resume)
      (global-set-key (kbd "<f6>") 'ivy-resume)
      (global-set-key (kbd "M-x") 'counsel-M-x)
      (global-set-key (kbd "C-x C-f") 'counsel-find-file)
      (global-set-key (kbd "<f1> f") 'counsel-describe-function)
      (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
      (global-set-key (kbd "<f1> l") 'counsel-load-library)
      (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
      (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
      (global-set-key (kbd "C-c g") 'counsel-git)
      (global-set-key (kbd "C-c j") 'counsel-git-grep)
      (global-set-key (kbd "C-c k") 'counsel-ag)
      (global-set-key (kbd "C-x l") 'counsel-locate)
      (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
      (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
      ))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun ivy-show-kill-ring ()
  (interactive)
  (ivy-read "kill-ring: " (helm-kill-ring-candidates)
            :action 'insert))
#+END_SRC
This is used in order to be able to query information about a command
C-s C-o
#+BEGIN_SRC emacs-lisp
(use-package ivy-hydra :ensure t)
#+END_SRC
#+BEGIN_SRC emacs-lisp
  ;;;;;;;;;;;;;;;;;;;;;;;; AutoComplete  ;;;;;;;;;;;;;;;;;;;;;;;;
  (use-package auto-complete
    :ensure t
    :init
    (progn
      (ac-config-default)
      (global-auto-complete-mode t)
      ))
#+END_SRC

**** Window Movement
Nice way of selecting windows.
#+BEGIN_SRC emacs-lisp
  (use-package ace-window :ensure t)
  (global-set-key (kbd "C-x M-o") 'ace-window)
#+END_SRC
** Git related
magit is for managing git repos in an easier fashion.
#+BEGIN_SRC emacs-lisp
  (use-package magit :ensure t)
#+END_SRC
Adds colors and git info to the dired buffer.
#+BEGIN_SRC emacs-lisp
  (use-package dired-k :ensure t)
#+END_SRC
Add git markers within files to show what you changed on the right
side of the buffer window.
#+BEGIN_SRC emacs-lisp
  (use-package git-gutter-fringe :ensure t)
  (require 'git-gutter-fringe)
  (global-git-gutter-mode +1)
  (setq git-gutter-fr:side 'right-fringe)
#+END_SRC
** Language Related
*** Org Additions
This adds the nicer bullets to org mode.
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
  (setq org-startup-with-inline-images t)
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)
#+END_SRC
Generic org mode settings for startup
#+BEGIN_SRC emacs-lisp
  (setq org-log-done 'time)
#+END_SRC
*** Python
#+BEGIN_SRC emacs-lisp
  ;;----------- Python additions ------------
  (use-package anaconda-mode :ensure t)
  ;;----------- IPython! --------------------
  (use-package ein  :ensure t)
  ;;------------ Fix python imports with ----
  (use-package importmagic :ensure t)
  ;;------------ Setting to ide -------------
  (use-package virtualenv :ensure t)
  (use-package edit-server :ensure t)
  (use-package jedi :ensure t)
#+END_SRC
*** R
This is ess, nie way of interacting with R code
#+BEGIN_SRC emacs-lisp
  (use-package ess :ensure t)
#+END_SRC
*** cpp
#+BEGIN_SRC emacs-lisp
  (setq auto-mode-alist (append '(("\\.h$" . c++-mode))
                                auto-mode-alist))
#+END_SRC
*** Computer-graphics - Shaders
Adds shader mode package
#+BEGIN_SRC emacs-lisp
  (use-package shader-mode :ensure t)
#+END_SRC
We also have to make sure that it starts on specific file extensions,
so that we don't have to type "M-x shader-mode" every time we open
those files.
#+BEGIN_SRC emacs-lisp
  (setq auto-mode-alist (append '(("\\.vert$" . shader-mode))
                                auto-mode-alist))
  (setq auto-mode-alist (append '(("\\.frag$" . shader-mode))
                                auto-mode-alist))
#+END_SRC

*** Website Development
Combines javascript and html editing so that things will be segmented
properly.
#+BEGIN_SRC emacs-lisp
(use-package web-mode :ensure t)
#+END_SRC
** Spellchecking
I may you ispell or fly spell, but not quite sure yet
#+BEGIN_SRC emacs-lisp
(flyspell-mode)
#+END_SRC
** Fancy stuff

**** highlighting parentheses
#+BEGIN_SRC emacs-lisp
  (use-package highlight-parentheses
    :ensure t
    :diminish highlight-parentheses-mode
    :config
    (add-hook 'emacs-lisp-mode-hook
              (lambda() (highlight-parentheses-mode))))
  (global-highlight-parentheses-mode)
#+END_SRC
**** fancy delimiters
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters    :ensure t )
  (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
  (require 'rainbow-delimiters)
#+END_SRC

** Random
#+BEGIN_SRC emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC
Makes sure my favorite theme is installed
#+BEGIN_SRC emacs-lisp
  (use-package suscolors-theme :ensure t)
#+END_SRC
This keeps emacs running in the background, so opening a new window
does not take as long as a fresh start
#+BEGIN_SRC emacs-lisp
  (require 'server)
  (unless (server-running-p)(server-start))
#+END_SRC

Maybe get rid of bell in emacs 25.1
#+BEGIN_SRC emacs-lisp
(defun my-bell-function())
(setq ring-bell-function 'my-bell-function)
(setq visible-bell nil)
#+END_SRC
** Startup
I made a customized buffer that is in org-mode and has links. I use it
to open up to things quickly and see what things I have to do.

This is where I keep my todo list so, I like to pull it before we open it.
#+BEGIN_SRC emacs-lisp
  (message (shell-command-to-string "cd ~/Desktop/courses/ ; git pull ;"))
#+END_SRC

#+BEGIN_SRC emacs-lisp
            (defun custom-startup ()
              "Custom startup file"
              (interactive)
              (switch-to-buffer "StArTuP")
              (StartuP-init)
              )

            (defvar StartuP-mode-map
              (let ((map (make-sparse-keymap)))
                (define-key map "\RET" 'org-open-at-point)
                (define-key map "\M-m\f"  'org-open-at-point)
                map)
              "Keymap for 'StartuP-mode.")

            (define-derived-mode StartuP-mode org-mode "StArTuP-mode"
              "Major mode for startup.
                      \\{StartuP-mode-map})"
              (setq org-startup-folded t)
              (setq case-fold-search nil))

            (add-hook 'StartuP-mode-hook
                      '(lambda ()
                         (local-set-key (kbd "RET") 'org-open-at-point))
                      )

            (defun StartuP-init ()
              "What startup does"
              (StartuP-mode)
              (read-only-mode)
              (erase-buffer)

              (StartuP-add-content)

              (org-overview)
              )

            (defun StartuP-add-content ()
              (let ((inhibit-read-only t))
                (insert "* Weather
        ")
                (insert  (shell-command-to-string "curl wttr.in/clemson"))
                (insert-file (expand-file-name "~/Desktop/courses/todo.org"))

                (StartuP-remove-re "\[[0-9 ;]*m")
                (StartuP-remove-re "*+[ ]*\\([0-9]+[ ]+\\)\\{8\\}\\([0-9:-]+[ ]+\\)\\{3\\}[0-9]+
*")
                (StartuP-remove-re "
.*
.*Speed")

                (StartuP-remove-re "
.*
.*updates")

                ;;(StartuP-replace-re "[ ]*Weather" "Weather")
                )
              )
      (defun StartuP-remove-re (theRegexp)
        (let ((inhibit-read-only t))
          (while (re-search-forward theRegexp nil t)
            (replace-match "")
            )
          (while (re-search-backward theRegexp nil t)
            (replace-match "")
            )
          )
        )
      (defun StartuP-replace-re (theRegexp changeTo)
        (let ((inhibit-read-only t))
          (while (re-search-forward theRegexp nil t)
            (replace-match changeTo)
            )
          (while (re-search-backward theRegexp nil t)
            (replace-match changeTo)
            )
          )
        )
            (defun add-weather()
              (interactive)
              (let ((inhibit-read-only t))
                (insert  (shell-command-to-string "curl wttr.in/clemson"))
                ))

            (defun insertBookmarks ()
              (let ((inhibit-read-only t))
                (bookmark-insert bookmark)
                ))

#+END_SRC


[[https://www.gnu.org/software/emacs/manual/html_node/elisp/Regexp-Special.html#Regexp-Special][Documentation for regex]]


#+BEGIN_SRC emacs-lisp
;;  (defun bookmarks-to-org-links ()
;;    "Get a list of all bookmarks in org format for a link"
;;    (with-temp-buffer
;;      (insert-file-contents (expand-file-name "~/.emacs.d/bookmarks"))
;;      (while (string-match "\"\\(.*\\)\"[.\n]* (filename . \"\\(.*\\)\"" (buffer-string))
;;        (push ())
;;      ))
#+END_SRC
sudo apt-get install weather-util

#+BEGIN_SRC emacs-lisp
  (defun remove-comments ()
    "remove comments for bookmarks"
    (while (string-match ";+.*\n" current-buffer)
      (setq current-buffer (replace-match "" t t current-buffer)))
    )
#+END_SRC



Some settings
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-screen t)
  (setq inhibit-startup-message t)
  (custom-startup)
#+END_SRC
*** Set Up Weather

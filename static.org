** Static

   This file contains things that do not normally change, it improves
   the load time since this will be compiled automatically

*** Emacs Package Manager
   We need to tell emacs where to find packages that we may want to
   download. Without this, it would be difficult to install new
   processes. With the following package we can use the ":ensure t"
   clause to ensure that the package will be installed if it doesn't yet
   exist.

   #+BEGIN_SRC emacs-lisp
     (require 'package)
   #+END_SRC

   Adding things to the package repository

   #+BEGIN_SRC emacs-lisp
  (setq package-archives nil)
  ;; Load packages from online
  (setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
                           ("marmalade" . "https://marmalade-repo.org/packages/")
                           ("org" . "http://orgmode.org/elpa/")))

  (package-initialize)

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (require 'use-package)

    (use-package try :ensure t)
   #+END_SRC
*** Window Movement
    Nice way of selecting windows.
#+BEGIN_SRC emacs-lisp
  (use-package ace-window :ensure t)
#+END_SRC
*** Searching
Gives key suggestions while typing key bindings
**** which-key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :config
    (which-key-mode))
  ;; Swiper addition with ivy
#+END_SRC
**** ivy
Finds you things
#+BEGIN_SRC emacs-lisp
  (use-package counsel :ensure t)
  (global-set-key (kbd "M-y") 'counsel-yank-pop)
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (use-package smex :ensure t)
  (use-package swiper
    :ensure try
    :config
    (progn
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (global-set-key "\C-s" 'swiper)
      (global-set-key (kbd "C-c C-r") 'ivy-resume)
      (global-set-key (kbd "<f6>") 'ivy-resume)
      (global-set-key (kbd "M-x") 'counsel-M-x)
      (global-set-key (kbd "C-x C-f") 'counsel-find-file)
      (global-set-key (kbd "<f1> f") 'counsel-describe-function)
      (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
      (global-set-key (kbd "<f1> l") 'counsel-load-library)
      (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
      (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
      (global-set-key (kbd "C-c g") 'counsel-git)
      (global-set-key (kbd "C-c j") 'counsel-git-grep)
      (global-set-key (kbd "C-c k") 'counsel-ag)
      (global-set-key (kbd "C-x l") 'counsel-locate)
      (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
      (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
      ))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun ivy-show-kill-ring ()
  (interactive)
  (ivy-read "kill-ring: " (helm-kill-ring-candidates)
            :action 'insert))
#+END_SRC
This is used in order to be able to query information about a command
C-s C-o
#+BEGIN_SRC emacs-lisp
(use-package ivy-hydra :ensure t)
#+END_SRC
#+BEGIN_SRC emacs-lisp
  ;;;;;;;;;;;;;;;;;;;;;;;; AutoComplete  ;;;;;;;;;;;;;;;;;;;;;;;;
  (use-package auto-complete :ensure t :init)
#+END_SRC

*** Auto-complete
#+BEGIN_SRC emacs-lisp
  (use-package company :ensure t)
  (add-hook 'after-init-hook 'global-company-mode)
  (setq company-dabbrev-downcase nil)
#+END_SRC
*** Theme
**** Add my theme in
add gruvbox theme on top of suscolors
#+BEGIN_SRC emacs-lisp
  (use-package suscolors-theme :ensure t)
  (use-package gruvbox-theme :ensure t)
#+END_SRC
This keeps emacs running in the background, so opening a new window
does not take as long as a fresh start
#+BEGIN_SRC emacs-lisp
    (require 'server)
    (unless (server-running-p)(server-start))
#+END_SRC
**** Add other theme Smart-mode-line
#+BEGIN_SRC emacs-lisp
  (use-package smart-mode-line :ensure t :init (setq sml/theme 'dark) :config (sml/setup)
                                          ;(add-to-list 'sml/replacer-regexp-list '("^~/Desktop/courses/" ":CRS:") t)
    (add-to-list 'sml/replacer-regexp-list '("g(.*)home/acarrab/" ":Palmetto:") t)
    (add-to-list 'sml/replacer-regexp-list  '("^~/Desktop/courses/\\(\\w+\\)/"
                                              (lambda (s) (concat ":" (upcase (match-string 1 s)) ":")))
                 t)
    (add-to-list 'sml/replacer-regexp-list  '("^~/Desktop/\\(\\w+\\)/"
                                              (lambda (s) (concat ":" (upcase (match-string 1 s)) ":")))
                 t)
    (setf rm-blacklist "[\(company\)\(ivy\)\(WK\)]")
    )
#+END_SRC
**** Add org-block coloring

#+BEGIN_SRC emacs-lisp
  (let ((class '((class color) (min-colors 89)))
        ;; Palette colors.
        (yellow-1 "#fce94f") (yellow-2 "#ffd700") (yellow-3 "#c4a000") (yellow-3-5 "#aaaa11") (yellow-4 "#875f00")
        (orange-1 "#ffaf5f") (orange-2 "#ff8700") (orange-3 "#ff5d17") (orange-4 "#d75f00") (orange-5 "#af5f00")
        (magenta-1 "#ff7bbb") (magenta-2 "#ff4ea3") (magenta-3 "#ff1f8b")
        (green-1 "#afff00") (green-2 "#a1db00") (green-3 "#5faf00") (green-4 "#008700") (green-5 "#005f00")
        (cyan-1 "#87ffff") (cyan-2 "#87d7af") (cyan-3 "#00d7af") (cyan-4 "#00ac8a") (cyan-5 "#5faf87") (cyan-6 "#005f5f") (cyan-7 "#236f73")
        (blue-1 "#5fafd7") (blue-2 "#1f5bff") (blue-3 "#005f87") (blue-4 "#005faf") (blue-5 "#0000af") (blue-6 "#00005f")
        (purple-1 "#d18aff") (purple-2 "#af5fff") (purple-3 "#9a08ff") (purple-4 "#6c0099")
        (red-1 "#ef2929")  (red-2 "#dd0000")  (red-3 "#a40000") (red-4 "#5f0000")
        (white-1 "#c6c6c6") (white-2 "#c6c6c6") (white-3 "#b2b2b2") (black-1 "#a8a8a8") (black-2 "#8a8a8a")
        (black-2-5 "#6c6c6c") (black-3 "#4e4e4e") (black-4 "#3a3a3a") (black-5 "#303030") (black-6 "#000000")
        (LIGHT_BG "#fdfde7") (white-0 "#eeeeee")
        (green-02 "#5fd700") (green-01 "#d7ff00") (green-0 "#d7ff5f") (green-00 "#d7ff87")
        (cyan-0 "#d7ffd7")
        (blue-01 "#c3c9f8") (blue-0 "#afd7ff") (blue-00 "#d7d7ff")
        (yellow-0 "#ffff87") (yellow-00 "#ffffaf")
        (purple-0 "#af87ff") (purple-00 "#e6a8df")
        (red-0 "#ff4b4b") (red-00 "#ffafaf")
        (magenta-0 "#ffafd7") (magenta-00 "#ffd7ff")
        (orange-0 "#ffaf87") (orange-00 "#ffd787") (orange-000 "#ffd7af")
        (linum-dark "#87875f") (linum-light "#d7d7af")
        )


    (custom-theme-set-faces
     'suscolors

     ;; org-mode
     `(org-code ((,class (:foreground ,blue-1 :background ,black-4))))
     `(org-link ((,class (:foreground ,blue-1 :underline t))))

     `(org-priority ((,class (:foreground ,red-1 :background ,nil))))
     `(org-block ((,class (:foreground ,blue-1 :background ,black-4))))
     `(org-block-background ((,class (:foreground nil :background ,black-5))))
     `(org-block-begin-line ((,class (:foreground ,white-0 :background ,cyan-6))))
     `(org-block-end-line ((,class (:foreground ,black-3 :background nil))))
     )
  )
#+END_SRC

#+RESULTS:
**** Org Additions
This adds the nicer bullets to org mode.
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC
Change bullet types
#+BEGIN_SRC emacs-lisp
  (setq org-bullets-face-name (quote org-bullet-face))
  (setq org-bullets-bullet-list '("◎" "✥" "❂" "✛" "✱" "✻" "⎈" "✛"))
#+END_SRC

Change ellipsis
#+BEGIN_SRC emacs-lisp
  (setq org-startup-with-inline-images t)
  (setq org-ellipsis " »");;⚡");; ⬎")
#+END_SRC

Change todo color
#+BEGIN_SRC emacs-lisp
(setq org-todo-keyword-faces
      '(("TODO" . (:foreground "teal" :weight bold)) ("STARTED" . "yellow")
        ("DONE" . (:foreground "green" :weight bold))))
#+END_SRC

Generic org mode settings for startup
#+BEGIN_SRC emacs-lisp
  (setq org-log-done 'time)
#+END_SRC

Adding in more babel
#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)))


(org-babel-do-load-languages
 'org-babel-load-languages
 '((latex . t)))
#+END_SRC

Some latex within org syntax highlighting
#+BEGIN_SRC emacs-lisp
(setq org-highlight-latex-and-related '(latex script entities))
#+END_SRC

**** highlighting parentheses
#+BEGIN_SRC emacs-lisp
  (use-package highlight-parentheses
    :ensure t
    :diminish highlight-parentheses-mode
    :config
    (add-hook 'emacs-lisp-mode-hook
              (lambda() (highlight-parentheses-mode))))
  (global-highlight-parentheses-mode)
#+END_SRC
**** fancy delimiters
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters    :ensure t )
  (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
  (require 'rainbow-delimiters)
#+END_SRC

*** Re-builder
Make regex builder have the same format as the regex for search and replace
#+BEGIN_SRC emacs-lisp
  (require 're-builder)
  (setq reb-re-syntax 'string)
#+END_SRC

*** Treemacs
#+BEGIN_SRC emacs-lisp
(use-package treemacs :ensure t)
(global-set-key (kbd "C-c l") 'treemacs)
#+END_SRC

*** Startup
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-screen t)
  (setq inhibit-startup-message t)
#+END_SRC
*** Get rid of bell in emacs 25
#+BEGIN_SRC emacs-lisp
  (defun my-bell-function())
  (setq ring-bell-function 'my-bell-function)
  (setq visible-bell nil)
#+END_SRC
*** Trailing whitespace
#+BEGIN_SRC emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

*** Languages
**** Python
#+BEGIN_SRC emacs-lisp
  ;;----------- Python additions ------------
  (use-package anaconda-mode :ensure t)
  ;;----------- IPython! --------------------
  (use-package ein  :ensure t)
  ;;------------ Fix python imports with ----
  (use-package importmagic :ensure t)
  ;;------------ Setting to ide -------------
  (use-package virtualenv :ensure t)
  (use-package edit-server :ensure t)
  (use-package jedi :ensure t)
#+END_SRC
**** cpp
#+BEGIN_SRC emacs-lisp
  (setq auto-mode-alist (append '(("\\.h$" . c++-mode))
                                auto-mode-alist))
#+END_SRC
**** Website Development
     Combines javascript and html editing so that things will be segmented properly.
#+BEGIN_SRC emacs-lisp
(use-package web-mode :ensure t)

(add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
;; others
(add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.php\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))

#+END_SRC
***** Laravel Specific
#+BEGIN_SRC emacs-lisp
(use-package php-mode :ensure t)
(add-to-list 'auto-mode-alist '("\\artisan\\'" . php-mode))

#+END_SRC

*** yasnippet
include yasnippets for nice snippets
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet :ensure t)
  (yas-global-mode 1)
  (use-package yasnippet-snippets :ensure t)

#+END_SRC

*** Install async mode
#+BEGIN_SRC emacs-lisp
(use-package async :ensure t)
#+END_SRC
